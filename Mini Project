Design a mini project to implement Snake and Ladders Game using Python.



import itertools
import random
import time
SNAKESANDLADDERS = {
27: 7,
35: 5,
39: 3,
50: 34,
59: 46,
66: 24,
73: 12,
76: 63,
89: 67,
97: 86,
99: 26,
2: 23,
8: 29,
22: 41,
28: 77,
30: 32,
44: 58,
54: 69,
70: 90,
80: 83,
87: 93,
}
class Dice:
@staticmethod
def roll():
return random.randint(1, 6)
class Player:
def init (self, name):
SE Computer Engineering 2019 Pattern Data Structure Algorithm Lab(DSAL)
MET’s Institute Of Engineering, NASHIK. Prepared By:
self.name = name.capitalize()
self.position = 0
self.born = False
self.last_three_moves = [0, 0, 0]
def has_won(self):
return self.position == 100
def update_position(self, dicevalue):
self.last_three_moves.pop(0)
self.last_three_moves.append(dicevalue)
if self.last_three_moves == [6, 6, 6]:
self.position = 0
self.born = False
return
new_pos = self.position + dicevalue
if new_pos >= 100:
return
else:
self.position = new_pos
while self.position in SNAKESANDLADDERS:
self.position = SNAKESANDLADDERS[self.position]
def print_position(self):
print(self.name, "POSITION ==>", str(self.position))
def play(self):
dicevalue = Dice.roll()
print(self.name + ": DICE SHOWS " + str(dicevalue))
if dicevalue == 1:
self.born = True
if not self.born:
print(self.name + ": player is not born yet")
else:
while True:
self.update_position(dicevalue)
self.print_position()
if dicevalue != 6:
break;
else:
dicevalue = Dice.roll()
class Game:
def init (self, players):
self.players = itertools.cycle(players)
self.num_players = len(players)
SE Computer Engineering 2019 Pattern Data Structure Algorithm Lab(DSAL)
MET’s Institute Of Engineering, NASHIK. Prepared By:
self.mutable_players = itertools.cycle(players)
def has_finished(self):
for i in range(self.num_players):
player = next(self.mutable_players)
if player.has_won():
return True
return False
def next_player(self):
return next(self.players)
if name == " main ":
no_of_players = int(input("Enter the no of player:"))
player_names = [name for name in input("Enter the name of players:").split()]
players = [Player(name) for name in player_names]
game = Game(players)
while not game.has_finished():
player = game.next_player()
player.play()
time.sleep(5)
