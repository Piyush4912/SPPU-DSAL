 Given sequence k = k1 <k2 < â€¦ <kn of n sorted keys, with a search probability pi for each key ki .
Build the Binary search tree that has the least search cost given the access probability for each key?


#include <iostream>
#include <climits>
using namespace std;
int sum(int freq[], int i, int j);
int optCost(int freq[], int i, int j)
{
 if (j < i)
 return 0;
 if (j == i)
 return freq[i];
 int fsum = sum(freq, i, j);
 int min = INT_MAX;
 for (int r = i; r <= j; ++r)
 {
 int cost = optCost(freq, i, r - 1) +
 optCost(freq, r + 1, j);
 if (cost < min)
 min = cost;
 }
 return min + fsum;
}
int optimalSearchTree(int keys[], int freq[], int n)
{
 return optCost(freq, 0, n - 1);
}
int sum(int freq[], int i, int j)
{
 int s = 0;
 for (int k = i; k <= j; k++)
 s += freq[k];
 return s;
}
int main()
{
 cout<<"\t\n # # # # # PRACTICAL NO.:- 8(D-18) # # # # # "<<endl;
 int n;
 cout <<"\tEnter How many Element Wants in OBST : ";
 cin >> n;
 int keys[n], freq[n];
 cout << "Enter The Keys:\n";
 for (int i = 0; i < n; ++i)
 {
 cout << "Key " << i + 1 << ": ";
 cin >> keys[i];
 }
 cout << "Enter the Frequencies:\n";
 for (int i = 0; i < n; ++i)
 {
 cout << "Frequency " << i + 1 << ": ";
 cin >> freq[i];
 }
 cout << "Cost of Optimal BST is "
 << optimalSearchTree(keys, freq, n);
 return 0;
}
