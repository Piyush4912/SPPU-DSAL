Represent a given graph using adjacency matrix/list to perform DFS and using adjacency list to
perform BFS. Use the map of the area around the college as the graph. Identify the prominent l and marks as
nodes and perform DFS and BFS on that.


#include <iostream>
#include <stdlib.h>
using namespace std;
int cost[10][10], i, j, k, n, qu[10], front, rear, v, visit[10], visited[10];
int stk[10], top, visit1[10], visited1[10];
int main()
{
 cout<<" * * * * * * PRACTICAL NO :-06(C_13) * * * * * * "<<endl;
 int m;
 cout << "Enter The Number of Vertices : ";
 cin >> n;
 cout << "Enter The Number of Edges : ";
 cin >> m;

 cout << "\nEDGES :\n";
 for (k = 1; k <= m; k++)
 {
 cin >> i >> j;
 cost[i][j] = 1;
 cost[j][i] = 1;
 }

 //display function
 cout << "The Adjacency Matrix of The Given Graph is : " << endl;
 for (i = 0; i < n; i++)
 {
 for (j = 0; j < n; j++)
 {
 cout << " " << cost[i][j];
 }
 cout << endl;
 }
 cout << "\nEnter Initial Vertex : ";
 cin >> v;
 cout << "\n-------The BFS of the Graph is------------------------\n";
 cout << v<<"->";
 visited[v] = 1;
 k = 1;

 while (k < n)
 {
 for (j = 1; j <= n; j++)
 if (cost[v][j] != 0 && visited[j] != 1 && visit[j] != 1)
 {
 visit[j] = 1;
 qu[rear++] = j;
 }
 v = qu[front++];
 cout << v << "->";
 k++;
 visit[v] = 0;
 visited[v] = 1;
 }

 cout <<endl<<"\nEnter Initial Vertex : ";
 cin >> v;
 cout << "\n-------The DFS of the Graph is-------------\n";
 cout << v<<"->";
 visited[v] = 1;
 k = 1;
 while (k < n)
 {
 for (j = n; j >= 1; j--)
 if (cost[v][j] != 0 && visited1[j] != 1 && visit1[j] != 1)
 {
 visit1[j] = 1;
 stk[top] = j;
 top++;
 }
 v = stk[--top];
 cout << v << "->";
 k++;
 visit1[v] = 0;
 visited1[v] = 1;
 }
cout<<endl;
 return 0;
}
